#!/usr/bin/env ruby

require "bundler/setup"
require File.expand_path(File.join(Dir.pwd, "config", "environment"),  __FILE__)

module PulsarJob
  class << self
    attr_reader :consumer

    class InvalidJobClassError < StandardError; end
    class NotPulsarJobError < StandardError; end

    def start(argv)
      command = argv.try(:first)
      case command
      when "produce"
        start_producer(argv)
      when "consume"
        start_consumer(argv)
      end
    end

    private

    def start_producer(argv)
      cli = ::PulsarJob::CLI.new(argv)
      job_class = load_job_class(argv.try(:[], 1))

      @producer = ::PulsarJob::Producer.new(job_class)
      @producer.publish!(cli.data)

      gracefully_shutdown(0)
    end

    def start_consumer(argv)
      cli = ::PulsarJob::CLI.new(argv)
      job_class_name = argv.try(:[], 1)

      if job_class_name == "PulsarJob::Async::Wrapper"
        @wrapper = ::PulsarJob::Async::Wrapper.new(nil).set(
          topic: cli.topic,
          subscription: cli.subscription,
        )
        @consumer = ::PulsarJob::Consumer.new(job: @wrapper)
      else
        @job = load_job_class(job_class_name).new
        @consumer = ::PulsarJob::Consumer.new(job: @job)
      end

      Signal.trap('INT', &method(:gracefully_shutdown))
      Signal.trap('TERM', &method(:gracefully_shutdown))

      PulsarJob.logger.info "#{job_class_name} is starting to consume messages [topic=#{@consumer.job.topic}}][subscription=#{@consumer.job.subscription}}]"
      @consumer.subscribe!
    end

    def gracefully_shutdown(signal)
      return if @shutting_down

      Thread.new do
        PulsarJob.logger.debug "Received SIG#{Signal.signame(signal)}, Gracefully shutting down consumer"
        @shutting_down = true

        @producer.shutdown if @producer
        @consumer.shutdown if @consumer

        # if @producer || @consumer
          # Only close the client if producer or consumer is running
          PulsarJob::Client.instance.close
        # end
        PulsarJob.logger.debug "Pulsar client closed"
        PulsarJob.logger.debug "Bye!"
      end.join

      exit 0
    end

    def load_job_class(job_name, pulsar_job: true)
      begin
        job_class = job_name.constantize
        unless pulsar_job && job_class.ancestors.include?(PulsarJob::Base)
          raise NotPulsarJobError.new("Job class #{job_name} does not inherit PulsarJob::Base")
        end
      rescue NameError
        raise InvalidJobClassError.new("Unable to find job class #{job_name}")
      end

      job_class
    end
  end
end

::PulsarJob.start(ARGV)
